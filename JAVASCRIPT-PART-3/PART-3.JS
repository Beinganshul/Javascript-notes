//?STRING METHODS

//*ACTIONS THAT CAN BE PERFORMED ON OBJECTS ARE CALLED METHODS
//*STRING METHODS ARE USED TO PERFORM ACTIONS ON STRINGS

//?FORMAT

//!STRINGNAME.METHOD()

//?TRIM METHOD

//*TRIMS WHITE SAPCES FROM BOTH ENDS OF A STRING NAD RETURNS THE NEW ONE
//!STRINSNAME.TRIM()

// let msg = "    Hello World    ";
// console.log(msg.trim());

//*USED TO CREATE PASSWORDS

// let password = prompt("Enter your password");
// let newPassword = password.trim();
// console.log(newPassword);

//*STRINGS ARE IMMUTABLE
//*METHODS RETURN A NEW STRING

//?TOUPPERCASE METHOD & TOLOWERCASE METHOD

//*CONVERTS A STRING TO UPPERCASE
//!str.toUpperCase()
//*CONVERTS A STRING TO LOWERCASE
//!str.toLowerCase()


//?STRING METHODS WITH ARGUMENTS

//*ARGUMENTS ARE VALUES THAT WE PASS TO A METHOD
//*ARGUMENTS ARE USED TO PERFORM ACTIONS ON STRINGS

//?INDEXOF METHOD

//*RETURNS FIRST INDEX OF OCCURRENCE OF SOME VALUE IN STRING. OR GIVE -1 IF NOT FOUND.
//!str.indexOf("text")  //?CASE SENSITIVE
//!str.indexOf("text", start)  //?STARTING POSITION OF SEARCH   //?CASE SENSITIVE

//?METHOD CHAINING

//*USING MULTIPLE METHODS ON A STRING
//*METHODS ARE EXECUTED FROM LEFT TO RIGHT

// let msg = "Hello World";
// console.log(msg.trim().toUpperCase().indexOf("W"));

//?SLICE METHOD

//*EXTRACTS A PART OF A STRING AND RETURNS A NEW STRING
//!str.slice(start, end)  
//*START IS REQUIRED BUT VO  INCLUDE  HOTA HAI
//*END INCLUDE NAHI HOTA HAI OOSE END-1 TAK PRINT KARTA HAI
//*NEGATIVE VALUES ARE ALLOWED
//!str.slice(start)  //?FROM START TO END OF STRING

//!str.slice(-2) = str.slice(str.length-2)         agar hum negative value pass karte hain to .


//?REPLACE METHOD

//*SEARCHES A VALUE IN A STRING AND REPLACES IT WITH ANOTHER VALUE AND RETURNS A NEW STRING
//!str.replace("old", "new")  //?CASE SENSITIVE
//*TO REPLACE ALL OCCURRENCES OF A VALUE
//!str.replace(/old/g, "new")  //?g MEANS GLOBAL
//*FIRST OCCURRENCE HI RED]PLACE HOGA

//?REPEAT METHOD

//*RETURNS A NEW STRING WITH A SPECIFIED NUMBER OF COPIES OF THE STRING
//!str.repeat(count)  COUNT KITNI BAR REPEAT KARNA HAI

//?ARRAY

//*ARRAYS ARE USED TO STORE MULTIPLE VALUES IN A SINGLE VARIABLE

// let students = ["Ali", "Ahmed", "Sara", "John"];
// console.log(students);

//*ARRAYS ALSO HAVE INDEXS 
//*ARRAYS IN JAVASCRIPT ARE IN THE FORM OF OBJECTS

//?CREATING ARRAYS

//*WE CAN STORE DIFFERENCE TYPES OF VALUES IN AN ARRAY
//*WE CAN STORE STRINGS, NUMBERS, OBJECTS, FUNCTIONS, ETC.

// let students = ["Ali", 23, "Sara", 25];                //*MIXED ARRAY

//!AGAR ARRAY KE ANDAR KISI ELEMENT KO LAANA HAI AD VO EK MIXED ARRAY HAI TO 
//!TO HAM FOR EXAMPLE OOPAR WALE ARRAY ME SARA KE INDEXX KO LAANE KE LIYE PEHELE JIS INDEX PE SARA HAI THEN SARA KE ANDAR A KA INDEX LIKHNA HAI

// let key = students[2][1];
// console.log(key);



//*EMPTY ARRAY 

// let students = [];                //*EMPTY ARRAY


//*ARRAYS ARE MUTABLE
//*WE CAN CHANGE THE VALUES OF AN ARRAY
//*NAYA ARRAY CREATE NAHI HOTA HAI

// let fruits = ["Apple", "Banana", "Mango"];
// fruits[1] = "Orange";
//*ARRAY ME CHANGE HOGA

//*AGAR 2 SE JYADA INDEX PE STORE KARAYEIN TO ARRAY KI LENGTH BADH JAYEGI  ---  UNDEFINED AYEGA


//?ARRAY METHODS

//*METHODS ARE USED TO PERFORM ACTIONS ON ARRAYS



//?PUSH METHOD

//*ADDS NEW ELEMENTS TO THE END OF AN ARRAY

//!array.push(item1, item2, ...)                

//*RETURNS THE NEW LENGTH OF THE ARRAY



//?UNSHIFT METHOD

//*ADDS NEW ELEMENTS TO THE START OF AN ARRAY

//!array.unshift(item1, item2, ...)

//*RETURNS THE NEW LENGTH OF THE ARRAY



//?POP METHOD

//*REMOVES THE LAST ELEMENT OF AN ARRAY

//!array.pop()

//*RETURNS THE REMOVED ELEMENT



//?SHIFT METHOD

//*REMOVES THE FIRST ELEMENT OF AN ARRAY

//!array.shift()

//*RETURNS THE REMOVED ELEMENT



//?INDEX OF METHOD

//*RETURNS THE FIRST INDEX OF AN ELEMENT IN AN ARRAY

//!array.indexOf(item)

//*RETURNS -1 IF THE ELEMENT IS NOT FOUND



//?INCLUDES METHOD

//*CHECKS IF AN ELEMENT EXISTS IN AN ARRAY

//!array.includes(item)

//*RETURNS TRUE IF THE ELEMENT EXISTS



//?CONCATANATE METHOD

//*MERGES TWO OR MORE ARRAYS

//!array1.concat(array2, array3, ...)
//!array1.concat(array2).concat(array3)

//*RETURNS A NEW ARRAY

// let primary = ["Red", "Blue", "Green"];
// let secondary = ["Yellow", "Orange", "Purple"];
// let colors = primary .concat(secondary);
// console.log(colors);
//*JIS ARRAY KO PEHELE LIKHENGE OOSKE ELEMENTS PEHELE AAYYENGE



//?REVERSE METHOD

//*REVERSES THE ELEMENTS OF AN ARRAY

//!array.reverse()

//*RETURNS THE REVERSED ARRAY


//?SLICE METHOD

//*EXTRACTS A PART OF AN ARRAY AND RETURNS A NEW ARRAY

//!array.slice(start, end)

//*START IS REQUIRED BUT END IS NOT INCLUDED

//*NEGATIVE VALUES ARE ALLOWED

//!array.slice(start)  //?FROM START TO END OF ARRAY

//*array.slice(-2) = array.slice(array.length-2)         agar hum negative value pass karte hain to . BASICALLY LAST 2 ELEMENTS LAAYEGA
//*array.slice(-2, -1) = array.slice(array.length-2, array.length-1) agar hum negative value pass karte hain to . BASICALLY LAST 2 ELEMENTS LAAYEGA



//?SPLICE METHOD 

//*ADDS NEW ELEMENTS TO AN ARRAY AND REMOVES OLD ELEMENTS

//!array.splice(start, deleteCount, item1, item2, ...)

//*START IS REQUIRED
//*DELETECOUNT IS REQUIRED
//*ITEMS ARE OPTIONAL
//*RETURNS THE REMOVED ELEMENTS AS AN ARRAY
//*IF DELETECOUNT IS 0, NO ELEMENTS ARE REMOVED


//*SLICE EK NEW ARRAY FORM KARTA HAI JABKI SPLICE EXISTING ARRAY ME CHANGE KARTA HAI
//*SPLICE ME HUM ELEMENTS BHI ADD KAR SAKTE HAIN

//!array.splice(2, 1) = array.splice(2, 1, "item1", "item2")   //?DELETE 1 ELEMENT FROM INDEX 2 AND ADD ITEM1 AND ITEM2
//*SPLICE ME HUM DELETECOUNT 0 BHI KAR SAKTE HAIN TOH BHI ELEMENT ADD HO JAYEGA

//*START KA MATLAB HAI WAHA SE SAARE INDEX KE ELEMENTS KO DELETE KAR DO IF DELETECOUNT IS 0



//?ARRAY SORTING

//*SORTS THE ELEMENTS OF AN ARRAY IN ALPHABETICAL ORDER

//*SORTS THE ELEMENTS OF AN ARRAY IN ASCENDING ORDER



//*SORT METHOD PEHELE ARRAY KO INTERNALLY STRING ME CONVERT KARTA HAI AND THEN SORT KARTA HAI
//*TO SORT NUMBERS IN ASCENDING ORDER, WE NEED TO PROVIDE A COMPARISON FUNCTION



//?ARRAY REFERENCES 

//*ARRAYS ARE STORED IN MEMORY AS REFERENCES
//*ARRAYS ARE OBJECTS
//*ARRAYS ARE PASSED BY REFERENCE
 
//[1, 2, 3] == [1, 2, 3]   //OUTPUT WILL BE FALSE 
//[1, 2, 3] === [1, 2, 3]  //OUTPUT WILL BE FALSE 

//*BECAUSE THEY ARE DIFFERENT OBJECTS IN MEMORY
//*TO CHECK IF TWO ARRAYS ARE EQUAL, WE NEED TO COMPARE EACH ELEMENT OF THE ARRAY
//*WE CAN USE A LOOP TO COMPARE EACH ELEMENT OF THE ARRAY

//!JAB BHI MEMORY ME EK ARRAY CREATE HOTA HAI TO OOSKA EK REFERENCE VARIABLE BHI CREATE HOTA HAI 
//!AUR HAMARE ARRAY KI EXACT LOCATION KUCH AUR REHETI HAI
//!JIS VARIABLE SE HAM ARRAY BANATE HAI VO HAMARA REFERENCE VARIABLE HOTA HAI JISE INDEX KE BAARE ME PATA HOTA HAI YE VARIABLE ADDRESS KO 
//!STORE KARVATA HAI . AISE HAR EK ARRAY KA EK ALAG VARIABLE HOTA HAI

//*COMPARE ALWAYS ADDRESS HOTE HAIN SABSE PEHELE




//?CONSTANT ARRAYS

//*WE CAN FORM CONSTANT ARRAYS BY USING THE KEYWORD CONST

//! const arr = [1,2,3]

//*BUT AGAR HAM IS ARRAY ME PUSH POP JAISE CHANGES LAYEIN TO VO HO JAYENGE 

//!BUT CONST SE KYA HOGA KI ARRAY COMPLETELY NEW ARRAY ME CONVERT NAHI HOGA 

//*VALUES CONST NAHI HUI HAIN arr CONSTANT HUA HAI 



//?NESTED ARRAYS OR MULTIDIMENSIONAL ARRAYS

// let nums = [[1,2] , [1,2,3] , [1,2,3,4]]

//*AGAR KISI ELEMENT KO ALAANA HAI TO JO ARRAY KE ANDAR STRINGS ME KARTE HAIN VO HI KARENGE

//*AGAR KISI INDEX PE CHANGE LANA HAI TO NORMALLY VALUE ASSIGN KAR DO

// nums[0][1] = 'o







